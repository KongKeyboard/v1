#define DEADZONE 100

// Keycodes personalizados compatibles con VIA
enum custom_keycodes {
    JOY_UP = SAFE_RANGE,
    JOY_DOWN,
    JOY_LEFT,
    JOY_RIGHT,
    JOY_BTN
};


// Estados de las teclas simuladas
static bool left_pressed = false;
static bool right_pressed = false;
static bool up_pressed = false;
static bool down_pressed = false;
static bool button_pressed = false;

void matrix_init_user(void) {
    setPinInputHigh(B2);  // Habilita pull-up para el botón del joystick
}

void matrix_scan_user(void) {
    int16_t x = analogReadPin(F7) - 512;
    int16_t y = analogReadPin(F6) - 512;

    // IZQUIERDA (JOY_RIGHT)
    if (x < -DEADZONE) {
        if (!left_pressed) {
            register_code16(JOY_RIGHT);
            left_pressed = true;
        }
    } else if (left_pressed) {
        unregister_code16(JOY_RIGHT);
        left_pressed = false;
    }

    // DERECHA (JOY_LEFT)
    if (x > DEADZONE) {
        if (!right_pressed) {
            register_code16(JOY_LEFT);
            right_pressed = true;
        }
    } else if (right_pressed) {
        unregister_code16(JOY_LEFT);
        right_pressed = false;
    }

    // ARRIBA (JOY_DOWN)
    if (y < -DEADZONE) {
        if (!up_pressed) {
            register_code16(JOY_DOWN);
            up_pressed = true;
        }
    } else if (up_pressed) {
        unregister_code16(JOY_DOWN);
        up_pressed = false;
    }

    // ABAJO (JOY_UP)
    if (y > DEADZONE) {
        if (!down_pressed) {
            register_code16(JOY_UP);
            down_pressed = true;
        }
    } else if (down_pressed) {
        unregister_code16(JOY_UP);
        down_pressed = false;
    }

    // BOTÓN CENTRAL (JOY_BTN)
    bool btn = !gpio_read_pin(B2);  // LOW = presionado

    if (btn && !button_pressed) {
        register_code16(KC_M);
        button_pressed = true;
    } else if (!btn && button_pressed) {
        unregister_code16(KC_M);
        button_pressed = false;
    }
}